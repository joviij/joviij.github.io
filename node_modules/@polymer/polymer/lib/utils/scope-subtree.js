define(["exports","./boot.js","./wrap.js"],function(_exports,_boot,_wrap){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.scopeSubtree=function(container,shouldObserve=!1){if(!ShadyDOM||!ShadyCSS){return null}if(!ShadyDOM.handlesDynamicScoping){return null}const ScopingShim=ShadyCSS.ScopingShim;if(!ScopingShim){return null}const containerScope=ScopingShim.scopeForNode(container),root=(0,_wrap.wrap)(container).getRootNode(),scopify=node=>{if(!sameScope(node,root)){return}const elements=Array.from(ShadyDOM.nativeMethods.querySelectorAll.call(node,"*"));elements.push(node);for(let i=0;i<elements.length;i++){const el=elements[i];if(!sameScope(el,root)){continue}const currentScope=ScopingShim.currentScopeForNode(el);if(currentScope!==containerScope){if(""!==currentScope){ScopingShim.unscopeNode(el,currentScope)}ScopingShim.scopeNode(el,containerScope)}}};scopify(container);if(shouldObserve){const mo=new MutationObserver(mxns=>{for(let i=0;i<mxns.length;i++){const mxn=mxns[i];for(let j=0;j<mxn.addedNodes.length;j++){const addedNode=mxn.addedNodes[j];if(addedNode.nodeType===Node.ELEMENT_NODE){scopify(addedNode)}}}});mo.observe(container,{childList:!0,subtree:!0});return mo}else{return null}};const ShadyDOM=window.ShadyDOM,ShadyCSS=window.ShadyCSS;function sameScope(node,scope){return(0,_wrap.wrap)(node).getRootNode()===scope}});