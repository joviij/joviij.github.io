define(["exports","./class.js","../../polymer-legacy.js","../utils/mixin.js","../utils/templatize.js"],function(_exports,_class,_polymerLegacy,_mixin,_templatize){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.LegacyDataMixin=void 0;const UndefinedArgumentError=class extends Error{constructor(message,arg){super(message);this.arg=arg;this.name=this.constructor.name;this.constructor=UndefinedArgumentError;this.__proto__=UndefinedArgumentError.prototype}};function wrapEffect(effect,fnName){if(effect&&effect.fn){const fn=effect.fn;effect.fn=function(){try{fn.apply(this,arguments)}catch(e){if(e instanceof UndefinedArgumentError){console.warn(`Argument '${e.arg}'${fnName?` for method '${fnName}'`:""} was undefined. Ensure it has a default value, or else ensure the method handles the argument being undefined.`)}else{throw e}}}}return effect}const LegacyDataMixin=(0,_mixin.dedupingMixin)(superClass=>{return class extends superClass{_marshalArgs(args,path,props){const vals=super._marshalArgs(args,path,props);if(this._legacyUndefinedCheck&&1<vals.length){for(let i=0;i<vals.length;i++){if(vals[i]===void 0||args[i].wildcard&&vals[i].base===void 0){const name=args[i].name;throw new UndefinedArgumentError(`Argument '${name}' is undefined.`,name)}}}return vals}_addPropertyEffect(property,type,effect){return super._addPropertyEffect(property,type,wrapEffect(effect,effect&&effect.info&&effect.info.methodName))}static _addTemplatePropertyEffect(templateInfo,prop,effect){return superClass._addTemplatePropertyEffect.call(this,templateInfo,prop,wrapEffect(effect))}}});_exports.LegacyDataMixin=LegacyDataMixin;_polymerLegacy.Polymer.Class=(info,mixin)=>(0,_class.Class)(info,superClass=>mixin?mixin(LegacyDataMixin(superClass)):LegacyDataMixin(superClass));const TemplatizeMixin=(0,_mixin.dedupingMixin)(superClass=>{const legacyBase=LegacyDataMixin(superClass);class TemplateLegacy extends legacyBase{get _legacyUndefinedCheck(){return this._methodHost&&this._methodHost._legacyUndefinedCheck}}TemplateLegacy.prototype._methodHost;return TemplateLegacy});_templatize.templatize.mixin=TemplatizeMixin;console.info("LegacyDataMixin will be applied to all legacy elements.\n"+"Set `_legacyUndefinedCheck: true` on element class to enable.")});